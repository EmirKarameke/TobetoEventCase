@using EventCase.Blazor.Web.Providers
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authState;
<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Link</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Dropdown
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#">Action</a></li>
                        <li><a class="dropdown-item" href="#">Another action</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#">Something else here</a></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link disabled" aria-disabled="true">Disabled</a>
                </li>
            </ul>
            <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
            @if (_isTokenExist)
            {
                <Dropdown>
                    <DropdownToggle>
                        @userName
                        <Icon Name="IconName.User" />
                    </DropdownToggle>
                    <DropdownMenu>
                        <DropdownItem>Profile</DropdownItem>
                        <DropdownDivider />
                        <DropdownItem href="myEvents" >MyEvents</DropdownItem>
                        <DropdownDivider />
                        <DropdownItem @onclick="Logout">Logout</DropdownItem>
                    </DropdownMenu>
                </Dropdown>
            }
            else
            {
                <NavLink href="login">
                    <Icon Name="IconName.UserPlus" /> Login
                </NavLink>

            }
        </div>
    </div>
</nav>

@code{
    private bool _isTokenExist;
    private string userName;
    protected override async Task OnInitializedAsync()
    {
        _isTokenExist = await ((AuthStateProvider)authState).IsAuthentication();
        if (_isTokenExist)
        {
            var user = await ((AuthStateProvider)authState).GetAuthenticationStateAsync();
            userName = user.User.Identities.First(i => i.NameClaimType == ClaimTypes.Name).Name;
        }
    }
    public void Logout()
    {
        if (_isTokenExist)
        {
            ((AuthStateProvider)authState).Logout();
        }
    }

}